name: vault
summary: Vault is a tool for securely accessing secrets.
description: |
  A modern system requires access to a multitude of secrets: database
  credentials, API keys for external services, credentials for service-oriented
  architecture communication, etc. Understanding who is accessing what secrets
  is already very difficult and platform-specific. Adding on key rolling,
  secure storage, and detailed audit logs is almost impossible without a custom
  solution. This is where Vault steps in.
base: core22
version: 1.16.3
license: BUSL-1.1
grade: stable
confinement: strict

apps:
  vault:
    command: bin/vault
    plugs:
      - network
      - network-bind
      - home
  vaultd:
    daemon: simple
    install-mode: disable
    command: bin/vaultd-start
    refresh-mode: endure
    reload-command: bin/vaultd-reload
    stop-command: bin/vaultd-stop
    restart-condition: on-failure
    stop-mode: sigterm
    plugs:
      - network
      - network-bind

architectures:
  - build-on: [amd64]
    build-for: [amd64]
  - build-on: [arm64]
    build-for: [arm64]
  - build-on: [armhf]
    build-for: [armhf]
  - build-on: [ppc64el]
    build-for: [ppc64el]
  - build-on: [s390x]
    build-for: [s390x]


package-repositories:
 - type: apt
   url: https://deb.nodesource.com/node_20.x
   components: [main]
   suites: [focal]
   key-id: 9FD3B784BC1C6FC31A8A0A1C1655A0AB68576280
 - type: apt
   url: https://dl.yarnpkg.com/debian/
   components: [main]
   suites: [stable]
   key-id: 72ECF46A56B4AD39C907BBB71646B01B86E50310

parts:
  vault:
    source: https://github.com/hashicorp/vault.git
    source-tag: "v$SNAPCRAFT_PROJECT_VERSION"
    plugin: go
    go-buildtags:
      - vault
      - ui
    build-snaps:
      - go/1.22/stable
    build-packages:
      - nodejs
      - yarn
    override-build: |
      # workaround for build.snapcraft.io builds
      if [ -n "${http_proxy:-}" ]; then
        echo "httpProxy: ${http_proxy}" >> ui/.yarnrc.yml
        echo "httpsProxy: ${https_proxy}" >> ui/.yarnrc.yml
      fi

      DEB_TARGET_ARCH=`dpkg-architecture -qDEB_TARGET_ARCH`
      if [ "$DEB_TARGET_ARCH" = "amd64" ] || [ "$DEB_TARGET_ARCH" = "arm64" ]; then
          # Build the WebUI assets
          make static-dist
      fi
      # Complete the main go build
      craftctl default
      # Manually strip binaries
      strip -s $CRAFT_PART_INSTALL/bin/*

  service-files:
    plugin: dump
    source: service
